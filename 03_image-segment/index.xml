<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>03_image-segments on SWT EToys Notes</title>
    <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/</link>
    <description>Recent content in 03_image-segments on SWT EToys Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 May 2016 14:23:20 +0200</lastBuildDate>
    
	<atom:link href="http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Image Segment</title>
      <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/</link>
      <pubDate>Wed, 18 May 2016 14:23:20 +0200</pubDate>
      
      <guid>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/</guid>
      <description>Image Segment If no other errors occure during the loading process, attempting to load a Squeak 3 Project in Squeak 5 will result in an error (&amp;rdquo;Error: Segment has not been becommed into the loaded objects&amp;rdquo;) from ImageSegment&amp;gt;&amp;gt;checkAndReportLoadError, which is called immediatly after the primitive at ImageSegment&amp;gt;&amp;gt;loadSegmentFrom:outPointers:.
The documentation of ImageSegment&amp;gt;&amp;gt;loadSegmentFrom:outPointers: states that &amp;ldquo;[this primitive] will have destroyed the contents of the segment wordArray&amp;rdquo; if it fails.
 As such it will probably be required to save a copy of the segment wordArray prior to executing this primitive.</description>
    </item>
    
    <item>
      <title>Object Headers</title>
      <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/object-header/</link>
      <pubDate>Mon, 06 Jun 2016 19:18:21 +0200</pubDate>
      
      <guid>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/object-header/</guid>
      <description>The header of a Squeak object contains of up to three words with the size of 4 bytes. The first is the so called base header and is always present. The second is the full class pointer of the object, it has an offset of -4 and isn&amp;rsquo;t present all the time. The third word is also optional, it has an offset of -8 and contains the size in words of an object.</description>
    </item>
    
    <item>
      <title>Object Oriented Pointer</title>
      <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/oop/</link>
      <pubDate>Mon, 06 Jun 2016 19:18:21 +0200</pubDate>
      
      <guid>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/oop/</guid>
      <description>When an object contains an oop it isn&amp;rsquo;t even sure that this is a real pointer. Because the last bit of the oop shows if it refers a real object or if it is a so called small integer. A zero means that it is a real pointer, a one that it is a small integer.
A small integer has 31 bit (the last one can&amp;rsquo;t be used for the integer) and can be positive or negative.</description>
    </item>
    
    <item>
      <title>Object Formats</title>
      <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/object-formats/</link>
      <pubDate>Fri, 24 Jun 2016 19:18:21 +0200</pubDate>
      
      <guid>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/object-formats/</guid>
      <description>This page compares the different object storage formats available in Squeak version 3 and 5, how they map to each other and how compatibility is best handled. Both Squeak versions store the format as a number internally (4 bit in Squeak 3, 5 bit in Squeak 5). These numbers will be mentioned for each format.
Sources for Squeak 3 include the article &amp;ldquo;Back to the future&amp;rdquo; found on the resources page, and for Squeak 5 the documentation on the Behavior class, for example Behavior#instSpec.</description>
    </item>
    
    <item>
      <title>Loading Process</title>
      <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/loading-process/</link>
      <pubDate>Sat, 11 Jun 2016 11:23:21 +0200</pubDate>
      
      <guid>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/loading-process/</guid>
      <description>We load segments with the following algorithm:
 For the entire segment:  Load header Create placeholder  For all placeholders:  Acquire class oop  While not all objects loaded:  For all placeholder objects:  If class is loaded, load object Else do nothing, class will be loaded in a subsequent iteration    Each object is loaded with the following steps:
 Create instance (with class basicNew or class basicNew: size) Write fields via primitives self becomeForward: createdObject  The object formats page goes into more details about how to instantiate and fill objects of different formats.</description>
    </item>
    
    <item>
      <title>Test Image Segment Creation</title>
      <link>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/test-segment-creation/</link>
      <pubDate>Sat, 11 Jun 2016 14:30:26 +0200</pubDate>
      
      <guid>http://HPI-SWA-Teaching.github.io/ETLoad/03_image-segment/test-segment-creation/</guid>
      <description>To better support automated testing and experimentation, it was necessary to create minimal image segments, containing only specific, known objects.
Since the creation of minimal test image segments needs to happen in a Squeak 3 VM, which has no support for filetree, the following method needs to be added manually to some class in the image:
This method probably only works for simple objects - classes, methods and out-pointers may or may not be exported correctly.</description>
    </item>
    
  </channel>
</rss>